const TelegramApi = require('node-telegram-bot-api')

require('dotenv').config();

const token = process.env.TELEGRAM_TOKEN;


const bot = new TelegramApi(token, {polling: true})

const chats = {}

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç 0 –¥–æ 9
const gameOptions = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '0', callback_data: '0' }, { text: '1', callback_data: '1' }, { text: '2', callback_data: '2' }],
      [{ text: '3', callback_data: '3' }, { text: '4', callback_data: '4' }, { text: '5', callback_data: '5' }],
      [{ text: '6', callback_data: '6' }, { text: '7', callback_data: '7' }, { text: '8', callback_data: '8' }],
      [{ text: '9', callback_data: '9' }]
    ]
  }
};

// –ö–Ω–æ–ø–∫–∞ "–∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
const againOptions = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: '/again' }]
    ]
  }
};

const startGame = async (chatId) => {
  await bot.sendMessage(chatId, '–Ø —Å–µ–π—á–∞—Å –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ—ë —É–≥–∞–¥–∞—Ç—å!');
  const randomNumber = Math.floor(Math.random() * 10);
  chats[chatId] = randomNumber;
  await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥—ã–≤–∞–π!', gameOptions);
};

const start = () => {
  bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    { command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' },
    { command: '/game', description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É' }
  ]);

  bot.on('message', async msg => {
    const text = msg.text;
    const chatId = msg.chat.id;

    if (text === '/start') {
      await bot.sendSticker(chatId, 'https://cdn.tlgrm.ru/stickers/463/343/46334338-7539-4dae-bfb6-29e0bb04dc2d/192/9.webp');
      return bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª U');
    }

    if (text === '/info') {
      return bot.sendMessage(chatId, `T–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name} (@${msg.from.username || '–Ω–µ—Ç username'})`);
    }

    if (text === '/game') {
      return startGame(chatId);
    }

    return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async msg => {
    const data = msg.data;
    const chatId = msg.message.chat.id;

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
    if (data === '/again') {
      return startGame(chatId);
    }

    // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
    if (parseInt(data) === chats[chatId]) {
      await bot.sendMessage(chatId, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}!`, againOptions);
    } else {
      await bot.sendMessage(chatId, `‚ùå –£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª. –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª ${chats[chatId]}.`, againOptions);
    }
  });
};

start();